<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="960" minHeight="600"
			   backgroundColor="#CACCCF" width="960" height="600" creationComplete="application1_creationCompleteHandler(event)" xmlns:local="*" usePreloader="false" xmlns:skins="skins.*">
	<fx:Script>
		<![CDATA[
			import com.greensock.TweenLite;
			
			import cycle.*;
			import cycle.IDirection;
			
			import fl.controls.Label;
			
			import flash.net.navigateToURL;
			
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.preloaders.Preloader;
			
			import resource.WebResource;
			
			import skins.BikeBrake;
			import skins.BikeGroupButton;
			import skins.BodyButton;
			import skins.ChainButton;
			import skins.CranksetButton;
			import skins.PreorderButton;
			import skins.RandomButton;
			
			import spark.primitives.Rect;
			
			public static var app:YongJiuC = null;
			
			public var loading:MovieClip = new (WebResource.Loading)();
			public var logo:Bitmap = new (WebResource.Logo)();
			
			private var curSelected:BottomButton;
			
			private var preSelected:BottomButton;
			
			private var curColor:Number = undefined;
			private var curColorIndex:uint = 0;
			//                        部位     颜色  价格  pantone
			public var arr:Array = [["body", "0", "0", "0"],
									["hand", "0", "0", "0"],
									["group", "0", "0", "0"],
									["round", "0", "0", "0"],
									["innerRound", "0", "0", "0"],
									["crankset", "0", "0", "0"],
									["seat", "0", "0", "0"],
									["brake", "0", "0", "0"],
									["chain", "0", "0", "0"]];
			
			private var dir:int = 0;
			private var loader:Loader;
			
			private var colorPickr:ColorPickr = new ColorPickr();
			private var preorder:PreorderPanel = new PreorderPanel();
			private var alertPanel:AlertPanel = new AlertPanel();
			private var noticePanel:NoticePanel;
			private var screenShotPanel : ScreenShotPanel = new ScreenShotPanel();
			
			private var obj:Object;
			private var index:uint = 0;
			[Bindable]
			private var totalPrice:String = "";
			
			private var bike:IDirection;
			
			private var colorXML:URLRequest = new URLRequest("fc.xml");
			private var urlLoader:URLLoader = new URLLoader();
			
			private var screenShotMode:Boolean = false;

			protected function application1_creationCompleteHandler(event:FlexEvent):void
			{
				app = this;
				this.addElement(colorPickr);
				colorPickr.visible = false;
				colorPickr.x = 10;
				colorPickr.y = 100;
				loadConfigXML();
				loadComponents();
			}
			
			private function loadConfigXML():void
			{
				urlLoader.addEventListener(Event.COMPLETE, colorXML_loadCompleteHandler);
				urlLoader.load(colorXML);
			}
			private function colorXML_loadCompleteHandler(event:Event):void{
				urlLoader.removeEventListener(Event.COMPLETE, colorXML_loadCompleteHandler);
				var configXML:XML = XML(event.target.data);
				urlLoader = null;
				colorXML = null;
				this.setDefaultPrice(configXML.type.(@id == Config.curType));
				colorPickr.setConfigXML(configXML);
			}
			public function changeArrayColor(num:uint, name:String = null, priceNum:Number = 0, pantoneValue:String = null):void
			{
				var curN:String;
				if(curSelected){
					curN = curSelected.id;
				}
				if(name){
					curN = name;
				}
				for each(var item:Array in arr){
					if(item[0] == curN){
						item[1] = num + "";
						item[2] = priceNum;
						item[3] = pantoneValue;
						setPrice();
						return;
					}
				}
			}
			
			private function setPrice():void
			{
				var p:Number = 0;
				for each(var ar:Array in arr){
					p += ar[2];
				}
				totalPrice = p + "";
			}
			
			public function loadCom(o:uint):void
			{
				if(!curSelected){
					return;
				}
				var name:String = curSelected.id;
				if(!loader){
					loader = new Loader();
					loader.contentLoaderInfo.addEventListener(Event.COMPLETE, loadSingleCom);
				}
				loader.load(new URLRequest(Config.curType + "/" + name + "/" + dir + "/" + o + Config.comFormat));
			}
			private function loadSingleCom(event:Event):void
			{
				loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, loadSingleCom);
				var bitmap:Bitmap = event.target.content as Bitmap;
				var mc:Sprite = new Sprite();
				mc.addChild(bitmap);
				mc.mouseChildren = false;
				loader = null;
				bike.replaceComponent(curSelected.id, mc);
			}
			private function startLoading():void
			{
				istage.mouseEnabled = false;
				istage.mouseChildren = false;
				istage.addChild(loading);
				loading.x = (this.width - loading.width) / 2;
				loading.y = 201;
			}
			private function finishLoading():void
			{
				istage.mouseEnabled = true;
				istage.mouseChildren = true;
				istage.removeChild(loading);
			}
			public function loadComponents():void
			{
				startLoading();
				var len:uint = arr.length;
				if(index >= len){
					var shit:Direction;
					if(bike){
						istage.removeChild(bike as Sprite);
					}
					bike = new (getDefinitionByName("cycle.Direction") as Class)();
					bike.addComponents(dir, obj);
					var nb:Sprite = bike as Sprite;
					var ui:UIComponent = new UIComponent();
					ui.addChild(nb);
					istage.addChild(nb);
					nb.y = 100;
					nb.x = (this.width - nb.width) / 2;
					finishLoading();
					index = 0;
					nb.alpha = 0;
					TweenLite.to(nb, 1, {alpha: 1, onComplete:checkIsScreenShot});
					nb.addEventListener(MouseEvent.MOUSE_MOVE, nb_mouseMoveHandler);
					nb.addEventListener(MouseEvent.MOUSE_OUT, nb_mouseOutHandler);
					nb.addEventListener(MouseEvent.CLICK, nb_mouseClickHandler);
					if(loader){
						loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, loadComplete_handler);
						loader = null;
					}
					return;
				}
				if(!loader){
					loader = new Loader();
					loader.contentLoaderInfo.addEventListener(Event.COMPLETE, loadComplete_handler);
				}
				loader.load(new URLRequest(Config.curType + "/" + arr[index][0] + "/" + dir + "/" + arr[index][1] + Config.comFormat));
			}
			
			public function closeScreenShotPanel():void
			{
				if(screenShotPanel && screenShotPanel.isPopUp) PopUpManager.removePopUp(screenShotPanel);
			}
			
			private function checkIsScreenShot():void{
				if(screenShotMode){
					loading.visible = false;
					screenShotMode = false;
					var bd:BitmapData = new BitmapData(istage.width, istage.height, true, 0x00);
					bd.draw(istage, null, null, null, null, true);
					var nbd:BitmapData = new BitmapData(720, 434, true, 0x00);
					nbd.copyPixels(bd, new Rectangle(100, 100, 720, 434), new Point(0, 0));
					PopUpManager.addPopUp(screenShotPanel, this, true);
					PopUpManager.centerPopUp(screenShotPanel);
					screenShotPanel.screenShot(nbd);
				}
			}
			
			public function showColorPickr(c:String):void
			{
				if(!colorPickr){
					colorPickr = new ColorPickr();
				}
				colorPickr.com = c;
				colorPickr.listColor();
				colorPickr.scaleX = 1;
				colorPickr.scaleY = 1;
				colorPickr.alpha = 1;
				colorPickr.visible = true;
				colorPickr.x = 10;
				colorPickr.y = 100;
				setCurSelected(c);
			}
			private function loadComplete_handler(event:Event):void{
				
				var bitmap:Bitmap = event.target.content as Bitmap;
				var mc:Sprite = new Sprite();
				mc.addChild(bitmap);
				mc.mouseChildren = false;
				if(!obj){
					obj = {};
				}
				obj[arr[index][0]] = mc;
				index++;
				loadComponents();
				
			}
			
			private function setDefaultPrice(param:XMLList) : void {
				var keys:Array = ["body", "brake", "chain", "crankset", "group", "hand", "innerRound", "round", "seat"];
				var p:uint = 0;
				for each(var str:String in keys){
					var xmlList:XMLList = getColorList(str, param);
					var colors:Array = String(xmlList.@colorValue).split(",");
					var prices:Array = String(xmlList.@price).split(",");
					var pantones:Array = String(xmlList.@pantoneValue).split(",");
					var index:int = colors.indexOf("0x000000");
					setArray(str, 0, prices[index], pantones[index]);
					p += uint(prices[index]);
				}
				totalPrice = p + "";
			}
			
			private function setArray(com:String, color:Number, price:Number, pantone:String):void
			{
				for each(var ar:Array in arr){
					if(ar[0] == com){
						ar[1] = color;
						ar[2] = price;
						ar[3] = pantone;
					}
				}
			}
			
			private function getColorList(name:String, xmlList:XMLList):XMLList
			{
				return xmlList[name];
			}
			
			protected function bottombutton1_clickHandler(event:MouseEvent):void
			{
				curSelected = event.currentTarget as BottomButton;
				showColorPickr(curSelected.id);
				setPreSelected(curSelected);
			}

			protected function bottombutton2_clickHandler(event:MouseEvent):void
			{
				curSelected = event.currentTarget as BottomButton;
				showColorPickr(curSelected.id);
				setPreSelected(curSelected);
			}

			protected function bottombutton3_clickHandler(event:MouseEvent):void
			{
				curSelected = event.currentTarget as BottomButton;
				showColorPickr(curSelected.id);
				setPreSelected(curSelected);
			}

			protected function bottombutton4_clickHandler(event:MouseEvent):void
			{
				curSelected = event.currentTarget as BottomButton;
				showColorPickr(curSelected.id);
				setPreSelected(curSelected);
			}

			protected function bottombutton5_clickHandler(event:MouseEvent):void
			{
				curSelected = event.currentTarget as BottomButton;
				showColorPickr(curSelected.id);
				setPreSelected(curSelected);
			}

			protected function bottombutton6_clickHandler(event:MouseEvent):void
			{
				curSelected = event.currentTarget as BottomButton;
				showColorPickr(curSelected.id);
				setPreSelected(curSelected);
			}

			protected function bottombutton7_clickHandler(event:MouseEvent):void
			{
				curSelected = event.currentTarget as BottomButton;
				showColorPickr(curSelected.id);
				setPreSelected(curSelected);
			}

			protected function bottombutton8_clickHandler(event:MouseEvent):void
			{
				curSelected = event.currentTarget as BottomButton;
				showColorPickr(curSelected.id);
				setPreSelected(curSelected);
			}

			protected function bottombutton9_clickHandler(event:MouseEvent):void
			{
				preorder.init();
				preorder.totalPriceValue = totalPrice;
				popUpLayer.visible = true;
				panelContainer.addElement(preorder);
			}
			private function setPreSelected(target:BottomButton):void{
				
				if(preSelected){
					if(preSelected.id != target.id){
						return;
					}
				}
//				if(curColor){
//					
//					target.changeColor(curColor);
//					
//				}
				preSelected = target;
				/* if(preSelected){
					
					preSelected.clearColor();
					
				}
				if(curColor){
					
					target.changeColor(curColor);
					
				}
				preSelected = target; */
				
			}
			private function setCurSelected(str:String):void
			{
				if(this[str]){
					this.curSelected = this[str];
					setPreSelected(curSelected);
				}
			}
			public function changeButtonColor(value:Number):void
			{
				curColor = value;
				if(!curSelected)
					return;
				curSelected.changeColor(value);
				
			}
			
			public function changeButtonRadom(key:String, color:Number) : void {
				this.curColor = color;
				var num:int = this.btnGroup.numElements;
				for(var i:int = 0; i < num; i++){
					var btn:BottomButton = btnGroup.getElementAt(i) as BottomButton;
					if(btn && btn.id == key){
						btn.changeColor(color);
						break;
					}
				}
			}

			protected function bottombutton10_clickHandler(event:MouseEvent):void
			{
				if(colorPickr)
					colorPickr.chooseRandomColor();
			}
			
			protected function leftButton_clickHandler(event:MouseEvent):void
			{
				dir++;
				if(dir > 5)
					dir = 0;
				else if(dir < 0)
					dir = 5;
				this.loadComponents();
			}
			
			protected function rightButton_clickHandler(event:MouseEvent):void
			{
				dir--;
				if(dir > 5)
					dir = 0;
				else if(dir < 0)
					dir = 5;
				this.loadComponents();
			}
			
			protected function nb_mouseMoveHandler(event:MouseEvent):void
			{
				var objs:Array = (this.bike as Sprite).getObjectsUnderPoint(new Point(this.istage.mouseX, this.istage.mouseY));
				var bool:Boolean = false;
				if(objs.length){
					for each(var bitmap:Bitmap in objs){
						if(!bool){
							var pixelColor:Number = bitmap.bitmapData.getPixel32(bitmap.mouseX, bitmap.mouseY);
							if(pixelColor >> 24 != 0){
								this.bike.highlightMC(bitmap.parent as Sprite);
								bool = true;
								continue;
							}
						}
						this.bike.removeHightlightSprite(bitmap.parent as Sprite);
					}
				}
				event.updateAfterEvent();
			}
			
			protected function nb_mouseOutHandler(event:MouseEvent):void
			{
				if(this.bike)
					this.bike.removeHightlight();
			}
			
			protected function nb_mouseClickHandler(event:MouseEvent):void
			{
				var objs:Array = (this.bike as Sprite).getObjectsUnderPoint(new Point(this.istage.mouseX, this.istage.mouseY));
				if(objs.length){
					for each(var bitmap:Bitmap in objs){
						var pixelColor:Number = bitmap.bitmapData.getPixel32(bitmap.mouseX, bitmap.mouseY);
						if(pixelColor >> 24 != 0){
							this.bike.showColorHad(bitmap.parent as Sprite);
						}
					}
				}
			}
			
			public function closePreorderPanel():void
			{
				panelContainer.removeAllElements();
				popUpLayer.visible = false;
			}
			
			public function showAlertPanel(str:String):void
			{
				if(!alertPanel) alertPanel = new AlertPanel();
				alertPanel.alertStr = str;
				PopUpManager.addPopUp(alertPanel, this, false);
				PopUpManager.centerPopUp(alertPanel);
			}
			
			public function hideAlertPanel():void
			{
				if(alertPanel && alertPanel.isPopUp)
					PopUpManager.removePopUp(alertPanel);
				alertPanel.alertStr = "";
			}
			
			public function showNoticePanel():void
			{
				if(!noticePanel) noticePanel = new NoticePanel();
				PopUpManager.addPopUp(noticePanel, this, true);
				PopUpManager.centerPopUp(noticePanel);
			}
			
			public function hideNoticePanel():void
			{
				if(noticePanel && noticePanel.isPopUp) PopUpManager.removePopUp(noticePanel);
				noticePanel = null;
			}
			
			protected function homeBtn_clickHandler(event:MouseEvent):void
			{
				navigateToURL(new URLRequest("http://www.cforever.net"), "_blank");
			}
			
			protected function shopBtn_clickHandler(event:MouseEvent):void
			{
				navigateToURL(new URLRequest("http://cforever.taobao.com"), "_blank");
			}
			
			protected function shareBtn_clickHandler(event:MouseEvent):void
			{
				dir = 0;
				screenShotMode = true;
				this.loadComponents();
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Rect width="100%" height="100%">
		<s:fill>
			<s:RadialGradient>
				<s:GradientEntry color="0xFFFFFF" />
				<s:GradientEntry color="0xFFFFFF" alpha="0" />
			</s:RadialGradient>
		</s:fill>
	</s:Rect>
	<s:Button skinClass="skins.LogoButton" id="logoBtn" width="70" height="28" x="100" buttonMode="true" />
	<s:HGroup verticalAlign="middle" horizontalAlign="center" x="250" gap="30">
		<s:Button skinClass="skins.HomeButton" id="homeBtn" width="82" height="25" buttonMode="true" click="homeBtn_clickHandler(event)" />
		<s:Button skinClass="skins.ShopButton" id="shopBtn" width="77" height="25" buttonMode="true" click="shopBtn_clickHandler(event)" />
		<s:Button skinClass="skins.DesignButton" id="designBtn" width="89" height="25" buttonMode="true" />
		<s:Button skinClass="skins.ShareButton" id="shareBtn" width="86" height="25" buttonMode="true" click="shareBtn_clickHandler(event)" />
	</s:HGroup>
	<s:HGroup width="100%" horizontalAlign="center" verticalAlign="middle" bottom="50" gap="30" id="btnGroup">
		<local:BottomButton buttonSkin="{skins.RandomButton}" label="随机秀" labelColor="#e2322b" topGap="10" buttonMode="true" click="bottombutton10_clickHandler(event)" />
		<mx:VRule height="50" strokeColor="#000000" shadowColor="#000000" width="1" />
		<local:BottomButton buttonSkin="{skins.BodyButton}" label="车 架" labelColor="#000000" id="body" topGap="10" buttonMode="true" click="bottombutton1_clickHandler(event)" />
		<local:BottomButton buttonSkin="{skins.HandButton}" label="把 套" labelColor="#000000" id="hand" topGap="20" buttonMode="true" click="bottombutton2_clickHandler(event)" />
		<local:BottomButton buttonSkin="{skins.RoundButton}" label="外 胎" labelColor="#000000" id="round" topGap="5" buttonMode="true" click="bottombutton3_clickHandler(event)" />
		<local:BottomButton buttonSkin="{skins.InnerRoundButton}" label="车 圈" labelColor="#000000" id="innerRound" topGap="5" buttonMode="true" click="bottombutton4_clickHandler(event)" />
		<local:BottomButton buttonSkin="{skins.SeatButton}" label="坐 椅" labelColor="#000000" id="seat" topGap="10" buttonMode="true" click="bottombutton5_clickHandler(event)" />
		<local:BottomButton buttonSkin="{skins.BikeBrake}" label="刹车线" labelColor="#000000" id="brake" topGap="10" buttonMode="true" click="bottombutton7_clickHandler(event)" />
		<local:BottomButton buttonSkin="{skins.ChainButton}" label="链 接" labelColor="#000000" id="chain" topGap="10" buttonMode="true" click="bottombutton6_clickHandler(event)" />
		<local:BottomButton buttonSkin="{skins.CranksetButton}" label="牙 盘" labelColor="#000000" id="crankset" topGap="10" buttonMode="true" click="bottombutton6_clickHandler(event)" />
		<local:BottomButton buttonSkin="{skins.BikeGroupButton}" label="组 件" labelColor="#000000" id="group" topGap="10" buttonMode="true" click="bottombutton8_clickHandler(event)" />
		<local:BottomButton buttonSkin="{skins.PreorderButton}" label="填写订单" labelColor="#000000" topGap="10" buttonMode="true" click="bottombutton9_clickHandler(event)" />
	</s:HGroup>
	<mx:HRule width="900" horizontalCenter="0" bottom="40" strokeColor="#a8a8a8" shadowColor="#a8a8a8"/>
	<s:HGroup horizontalAlign="right" verticalAlign="middle" width="100%" paddingRight="60" bottom="10">
		<s:BitmapImage source="{WebResource.Price}" />
		<s:Label text="{totalPrice}" fontSize="16" />
	</s:HGroup>
	<s:Button skinClass="{skins.LeftButton}" id="leftButton" x="150" y="250" click="leftButton_clickHandler(event)" />
	<s:Button skinClass="{skins.RightButton}" id="rightButton" x="780" y="250" click="rightButton_clickHandler(event)" />
	<s:SpriteVisualElement id="istage" width="100%" height="100%" mouseEnabled="false" mouseChildren="true" />
	<s:BorderContainer backgroundColor="0x000000" alpha="0.7" width="100%" height="100%" id="popUpLayer" visible="false" />
	<s:HGroup id="panelContainer" verticalAlign="middle" horizontalAlign="center" width="100%" height="100%" />
</s:Application>
