<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="192"
		 cornerRadius="5" backgroundAlpha=".5" borderAlpha=".8" borderColor="0xf9f9fa"
		 creationComplete="bordercontainer1_creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import com.greensock.TweenLite;
			import com.greensock.easing.*;
			
			import cycle.Color;
			
			import fl.core.UIComponent;
			
			import flash.filters.BitmapFilter;
			import flash.filters.BitmapFilterQuality;
			import flash.filters.DropShadowFilter;
			
			import mx.events.FlexEvent;
			
			import resource.WebResource;
			
			private var iconW:uint;
			private var iconH:uint;
			private var vgap:uint = 8;
			private var hgap:uint = 8;
			private var row:uint;
			private var _com:String = null;
			private var _curColorList:Array;
			private var _pantonColorList:Array;
			private var _priceList:Array;
			private var configXML:XMLList;
			
			[Bindable]
			private var comTitle:String = "";
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				TweenLite.to(this, .3, {transformAroundCenter:{scaleX:0, scaleY: 0}, ease:Cubic.easeIn, alpha:0, onComplete:hideSelf});
			}
			
			private function hideSelf():void
			{
				this.visible = false;
			}

			protected function bordercontainer1_creationCompleteHandler(event:FlexEvent):void
			{
				var filter:BitmapFilter = getBitmapFilter();
				var myFilters:Array = new Array();
				myFilters.push(filter);
				this.filters = myFilters;
			}
			public function setConfigXML(xml:XML):void
			{
				configXML = xml.type.(@id == Config.curType);
				iconW = xml.@width;
				iconH = xml.@height;
			}
			private function getBitmapFilter(co:Number = 0x000000, an:Number = 0, al:Number = 0.8, bx:Number = 8, by:Number = 8, dis:Number = 1, str:Number = 0.65):BitmapFilter {
				var color:Number = co;
				var angle:Number = an;
				var alpha:Number = al;
				var blurX:Number = bx;
				var blurY:Number = by;
				var distance:Number = dis;
				var strength:Number = str;
				var inner:Boolean = false;
				var knockout:Boolean = false;
				var quality:Number = BitmapFilterQuality.HIGH;
				return new DropShadowFilter(distance,
					angle,
					color,
					alpha,
					blurX,
					blurY,
					strength,
					quality,
					inner,
					knockout);
			}
			public function listColor():void
			{
				if(istage){
				
					if(istage.numChildren){
						
						while(istage.numChildren){
							
							istage.removeChildAt(0);
							
						}
						
					}
					
				}
				var comXML:XML = XML(configXML[_com]);
				
				_curColorList = [];
				_curColorList = String(configXML[_com].@colorValue).split(",");
				_pantonColorList = String(configXML[_com].@pantoneValue).split(",");
				_priceList = String(configXML[_com].@price).split(",");
				
				var column:uint = uint(154 / (hgap + iconW));
				
				var len:uint = _curColorList.length;
				row = Math.ceil(len / column);
				for (var i:uint = 0; i < len; i++){
					var colorIcon:Color = new Color(Number(_curColorList[i]), _priceList[i], _pantonColorList[i], 14, 14);
					colorIcon.mouseChildren = false;
					istage.addChild(colorIcon);
					colorIcon.addEventListener(MouseEvent.MOUSE_OVER, scaleOut);
					colorIcon.addEventListener(MouseEvent.MOUSE_OUT, scaleIn);
					colorIcon.addEventListener(MouseEvent.CLICK, changeButtonColor);
					colorIcon.x = (i % column) * (hgap + iconW) + 17;
					colorIcon.y = uint(i / column) * (vgap + iconH) + 63;
//					this.dispatchEvent(new Event(Event.RENDER));
				}
				layoutSize();
			}
			private function layoutSize():void
			{
				rect.height = row * iconH + (row - 1) * vgap + 10 + rect.y;
				this.height = rect.height + 5 + rect.y;
			}
			private function scaleOut(event:MouseEvent):void
			{
				var colorIcon:Color = event.target as Color;
				TweenLite.to(colorIcon, .3, {transformAroundCenter:{scaleX:1.2, scaleY: 1.2}});
			}
			private function scaleIn(event:MouseEvent):void
			{
				var colorIcon:Color = event.target as Color;
				TweenLite.to(colorIcon, .3, {transformAroundCenter:{scaleX:1, scaleY: 1}});
			}
			private function changeButtonColor(event:MouseEvent):void
			{
				YongJiuC.app.changeButtonColor((event.target as Color).value);
				YongJiuC.app.changeArrayColor((event.target as Color).value);
				YongJiuC.app.loadCom((event.target as Color).value);
			}
			public function chooseRandomColor():void
			{
				var allColors:Object = {"body": getColorList("body"), "brake": getColorList("brake"), "chain": getColorList("chain"),
					"crankset": getColorList("crankset"), "group": getColorList("group"), "hand": getColorList("hand"), "innerRound": getColorList("innerRound"),
					"round": getColorList("round"), "seat": getColorList("seat")};
				for (var key:String in allColors){
					
//					if(key == "crankset" || key == "chain"){
//						
//						continue;
//						
//					}
					var colorList:Array = String(allColors[key].@colorValue).split(",");
					var pantoneList:Array = String(allColors[key].@pantoneValue).split(",");
					var priceList:Array = String(allColors[key].@price).split(",");
					var ran:Number = Math.random();
					var coo:uint = uint(colorList.length * ran);
					YongJiuC.app.changeArrayColor(colorList[coo], key);
					YongJiuC.app.changeButtonRadom(key, colorList[coo]);
					
				}
				YongJiuC.app.loadComponents();
				
			}
			private function getColorList(name:String):XMLList
			{
				return configXML[name];
			}
			public function set com(str:String):void
			{
				_com = str;
				switch(str){
					case "body":
						comTitle = "车 架";
						break;
					case "hand":
						comTitle = "把 手";
						break;
					case "round":
						comTitle = "外 胎";
						break;
					case "innerRound":
						comTitle = "车 圈";
						break;
					case "seat":
						comTitle = "坐 椅";
						break;
					case "brake":
						comTitle = "刹车线";
						break;
					case "chain":
						comTitle = "链 条";
						break;
					case "crankset":
						comTitle = "牙 盘";
						break;
					case "group":
						comTitle = "组 件";
						break;
				}
			}
			public function get com():String{
				
				return _com;
				
			}

			protected function bordercontainer2_mouseDownHandler(event:MouseEvent):void
			{
				this.startDrag();
			}
			
			protected function bordercontainer2_mouseUpHandler(event:MouseEvent):void
			{
				this.stopDrag();
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Rect width="184" bottomLeftRadiusX="5" bottomRightRadiusX="5" x="3" y="32" id="rect">
		<s:fill>
			<s:SolidColor color="0xf9f9fa" />
		</s:fill>
	</s:Rect>
	<s:Label text="选择一种颜色" x="15" y="40" />
	<s:BorderContainer width="190" backgroundImage="{WebResource.BlackTop}" height="29" borderVisible="false"
					   mouseDown="bordercontainer2_mouseDownHandler(event)" mouseUp="bordercontainer2_mouseUpHandler(event)">
		<s:Label text="{comTitle}" fontSize="12" color="0xffffff" y="9" x="10" />
		<s:Button skinClass="skins.CloseButton" width="9" height="9" buttonMode="true" click="button1_clickHandler(event)" right="10" y="10" />
	</s:BorderContainer>
	<s:SpriteVisualElement id="istage" width="100%" height="100%" />
</s:BorderContainer>
