<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute"
				title="Create Chat Room" width="300" height="220" borderAlpha="1" showCloseButton="true"
				initialize="onInit( event )" close="onCloseClick( event )">
	
	<mx:Script>
		<![CDATA[
			import com.yourpalmark.chat.ChatManager;
			import com.yourpalmark.chat.data.ChatRoom;

			import org.igniterealtime.xiff.data.forms.FormExtension;
			import org.igniterealtime.xiff.events.RoomEvent;

			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.IFocusManagerComponent;
			import mx.managers.PopUpManager;
			
			public static var CREATE:String = "create";
			
			private var _room:ChatRoom;
			private var _chatManager:ChatManager;
			
			public function set chatManager( value:ChatManager ):void
			{
				_chatManager = value;
				invalidateProperties();
			}
			
			public function get room():ChatRoom
			{
				return _room;
			}
			
			override protected function commitProperties():void
			{
				super.commitProperties();
				
				if( _chatManager ) _room.chatManager = _chatManager;
			}
			
			public function close():void
			{
				roomName.text = "";
				roomName.removeEventListener( KeyboardEvent.KEY_DOWN, onInputKeyDown );
				roomName.removeEventListener( FocusEvent.FOCUS_IN, onRoomNameFocusIn );
				roomName.removeEventListener( FocusEvent.FOCUS_OUT, onRoomNameFocusOut );
				
				roomSubject.text = "";
				roomSubject.removeEventListener( KeyboardEvent.KEY_DOWN, onInputKeyDown );
				roomSubject.removeEventListener( FocusEvent.FOCUS_IN, onRoomSubjectFocusIn );
				roomSubject.removeEventListener( FocusEvent.FOCUS_OUT, onRoomSubjectFocusOut );
				
				removeRoomListeners();
				
				_room = null;
				
				PopUpManager.removePopUp( this );
			}
			
			private function addRoomListeners():void
			{
				_room.addEventListener( RoomEvent.CONFIGURE_ROOM, onConfigureRoom, false, 0, true );
				_room.addEventListener( RoomEvent.CONFIGURE_ROOM_COMPLETE, onConfigureRoomComplete, false, 0, true );
			}
			
			private function removeRoomListeners():void
			{
				_room.removeEventListener( RoomEvent.CONFIGURE_ROOM, onConfigureRoom );
				_room.removeEventListener( RoomEvent.CONFIGURE_ROOM_COMPLETE, onConfigureRoomComplete );
			}
			
			private function createRoom():void
			{
				_room.create( roomName.text );
			}
			
			private function setComponentFocus( o:IFocusManagerComponent ):void
			{
				focusManager.setFocus( o );
			}
			
			
			private function onInit( event:FlexEvent ):void
			{
				_room = new ChatRoom();
				addRoomListeners();
				
				roomName.addEventListener( FocusEvent.FOCUS_IN, onRoomNameFocusIn, false, 0, true );
				roomName.addEventListener( FocusEvent.FOCUS_OUT, onRoomNameFocusOut, false, 0, true );
				
				roomSubject.addEventListener( FocusEvent.FOCUS_IN, onRoomSubjectFocusIn, false, 0, true );
				roomSubject.addEventListener( FocusEvent.FOCUS_OUT, onRoomSubjectFocusOut, false, 0, true );
				
				callLater( setComponentFocus, [ roomName ] );
			}
			
			private function onCloseClick( event:CloseEvent ):void
			{
				close();
			}
			
			private function onInputKeyDown( event:KeyboardEvent ):void
			{
				if( event.keyCode == Keyboard.ENTER )
				{
					createRoom();
				}
			}
			
			private function onRoomNameFocusIn( event:FocusEvent ):void
			{
				roomName.addEventListener( KeyboardEvent.KEY_DOWN, onInputKeyDown );
			}
			
			private function onRoomNameFocusOut( event:FocusEvent ):void
			{
				roomName.removeEventListener( KeyboardEvent.KEY_DOWN, onInputKeyDown );
			}
			
			private function onRoomSubjectFocusIn( event:FocusEvent ):void
			{
				roomSubject.addEventListener( KeyboardEvent.KEY_DOWN, onInputKeyDown );
			}
			
			private function onRoomSubjectFocusOut( event:FocusEvent ):void
			{
				roomSubject.removeEventListener( KeyboardEvent.KEY_DOWN, onInputKeyDown );
			}
			
			private function onCreateClick( event:MouseEvent ):void
			{
				createRoom();
			}
			
			private function onConfigureRoom( event:RoomEvent ):void
			{
				var formExtension:FormExtension = event.data as FormExtension;
				
				_room.room.configure( formExtension );
				
				_room.room.changeSubject( roomSubject.text );
			}
			
			private function onConfigureRoomComplete( event:RoomEvent ):void
			{
				var createEvent:Event = new Event( CREATE );
				dispatchEvent( createEvent );
			}
		]]>
	</mx:Script>
	
	<mx:VBox width="100%" height="100%" paddingTop="5" paddingRight="5" paddingBottom="5" paddingLeft="5" verticalGap="10">
		<mx:VBox width="100%" verticalGap="2">
			<mx:Label text="Room Name" width="100%" fontWeight="bold" />
			<mx:TextInput id="roomName" width="100%" />
		</mx:VBox>
		<mx:VBox width="100%" verticalGap="2">
			<mx:Label text="Room Subject" width="100%" fontWeight="bold" />
			<mx:TextInput id="roomSubject" width="100%" />
		</mx:VBox>
		<mx:HBox width="100%" paddingTop="10">
			<mx:Spacer width="100%" />
			<mx:Button id="createButton" label="Create Room" click="onCreateClick( event )" />
		</mx:HBox>
	</mx:VBox>
	
</mx:TitleWindow>