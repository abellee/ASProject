<?xml version="1.0" encoding="UTF-8"?><apiPackage id="org.igniterealtime.xiff.im"><apiName>org.igniterealtime.xiff.im</apiName><apiDetail/><apiClassifier id="org.igniterealtime.xiff.im:Roster"><apiName>Roster</apiName><shortdesc>
	 Manages a user's server-side instant messaging roster (or "buddy list").</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.igniterealtime.xiff.im:IRoster</apiBaseInterface><apiBaseClassifier>org.igniterealtime.xiff.collections:ArrayCollection</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Manages a user's server-side instant messaging roster (or "buddy list"). By default,
	 this class uses an internal data provider to keep track of roster data locally and
	 provides a "read-only" form of the Data Provider API for external use. Non-read operations
	 are performed using alternative, roster-specific methods.
	 	 </apiDesc></apiClassifierDetail><related-links><link href="http://tools.ietf.org/html/rfc3921#section-7"><linktext>http://tools.ietf.org/html/rfc3921#section-7</linktext></link></related-links><adobeApiEvent id="org.igniterealtime.xiff.im:Roster_org.igniterealtime.xiff.events.RosterEvent.USER_SUBSCRIPTION_UPDATED_userSubscriptionUpdated"><apiName>userSubscriptionUpdated</apiName><shortdesc>
	 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.igniterealtime.xiff.events.RosterEvent.USER_SUBSCRIPTION_UPDATED</apiEventType><adobeApiEventClassifier>org.igniterealtime.xiff.events.RosterEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="org.igniterealtime.xiff.im:Roster_org.igniterealtime.xiff.events.RosterEvent.USER_PRESENCE_UPDATED_userPresenceUpdated"><apiName>userPresenceUpdated</apiName><shortdesc>
	 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.igniterealtime.xiff.events.RosterEvent.USER_PRESENCE_UPDATED</apiEventType><adobeApiEventClassifier>org.igniterealtime.xiff.events.RosterEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="org.igniterealtime.xiff.im:Roster_org.igniterealtime.xiff.events.RosterEvent.USER_REMOVED_userRemoved"><apiName>userRemoved</apiName><shortdesc>
	 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.igniterealtime.xiff.events.RosterEvent.USER_REMOVED</apiEventType><adobeApiEventClassifier>org.igniterealtime.xiff.events.RosterEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="org.igniterealtime.xiff.im:Roster_org.igniterealtime.xiff.events.RosterEvent.ROSTER_LOADED_rosterLoaded"><apiName>rosterLoaded</apiName><shortdesc>
	 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.igniterealtime.xiff.events.RosterEvent.ROSTER_LOADED</apiEventType><adobeApiEventClassifier>org.igniterealtime.xiff.events.RosterEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="org.igniterealtime.xiff.im:Roster_org.igniterealtime.xiff.events.RosterEvent.USER_AVAILABLE_userAvailable"><apiName>userAvailable</apiName><shortdesc>
	 Broadcast whenever a contact in the roster becomes available.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.igniterealtime.xiff.events.RosterEvent.USER_AVAILABLE</apiEventType><adobeApiEventClassifier>org.igniterealtime.xiff.events.RosterEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 Broadcast whenever a contact in the roster becomes available. (Goes from offline to online.)
	 The event object contains an attribute <codeph>jid</codeph> with the JID of the user who
	 became available.
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="org.igniterealtime.xiff.im:Roster_org.igniterealtime.xiff.events.RosterEvent.USER_UNAVAILABLE_userAvailable"><apiName>userAvailable</apiName><shortdesc>
	 Broadcast whenever a contact in the roster becomes unavailable.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.igniterealtime.xiff.events.RosterEvent.USER_UNAVAILABLE</apiEventType><adobeApiEventClassifier>org.igniterealtime.xiff.events.RosterEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 Broadcast whenever a contact in the roster becomes unavailable. (Goes from online to offline.)
	 The event object contains an attribute <codeph>jid</codeph> with the JID of the user who
	 became unavailable.
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="org.igniterealtime.xiff.im:Roster_org.igniterealtime.xiff.events.RosterEvent.SUBSCRIPTION_DENIAL_subscriptionDenial"><apiName>subscriptionDenial</apiName><shortdesc>
	 Broadcast whenever a subscription request that you make (via the addContact()
	 or requestSubscription() methods) is denied.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.igniterealtime.xiff.events.RosterEvent.SUBSCRIPTION_DENIAL</apiEventType><adobeApiEventClassifier>org.igniterealtime.xiff.events.RosterEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 Broadcast whenever a subscription request that you make (via the <codeph>addContact()</codeph>
	 or <codeph>requestSubscription()</codeph> methods) is denied.
	 	 The event object contains an attribute <codeph>jid</codeph> with the JID of the user who
	 denied the request.
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="org.igniterealtime.xiff.im:Roster_org.igniterealtime.xiff.events.RosterEvent.SUBSCRIPTION_REQUEST_subscriptionRequest"><apiName>subscriptionRequest</apiName><shortdesc>
	 Broadcast whenever someone requests to subscribe to your presence.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.igniterealtime.xiff.events.RosterEvent.SUBSCRIPTION_REQUEST</apiEventType><adobeApiEventClassifier>org.igniterealtime.xiff.events.RosterEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 Broadcast whenever someone requests to subscribe to your presence. The event object
	 contains an attribute <codeph>jid</codeph> with the JID of the user who is requesting
	 a presence subscription.
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="org.igniterealtime.xiff.im:Roster_org.igniterealtime.xiff.events.RosterEvent.SUBSCRIPTION_REVOCATION_subscriptionRevocation"><apiName>subscriptionRevocation</apiName><shortdesc>
	 Broadcast whenever someone revokes your presence subscription.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.igniterealtime.xiff.events.RosterEvent.SUBSCRIPTION_REVOCATION</apiEventType><adobeApiEventClassifier>org.igniterealtime.xiff.events.RosterEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 Broadcast whenever someone revokes your presence subscription. This is not
	 an event that is fired when you revoke a subscription, but rather when one of your
	 contacts decides that he/she/it no longer wants you to know about their presence
	 status.
	 	 The event object contains an attribute <codeph>jid</codeph> with the JID of
	 the user who revoked your subscription.
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="org.igniterealtime.xiff.im:Roster:Roster"><apiName>Roster</apiName><shortdesc>
		 		 </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>aConnection</apiItemName><apiOperationClassifier>org.igniterealtime.xiff.core:IXMPPConnection</apiOperationClassifier><apiData>null</apiData><apiDesc>A reference to an XMPPConnection class instance
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="org.igniterealtime.xiff.im:Roster:addContact_result"><apiName>addContact_result</apiName><shortdesc>
		 		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>resultIQ</apiItemName><apiOperationClassifier>org.igniterealtime.xiff.data:IQ</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.igniterealtime.xiff.im:Roster:addContact"><apiName>addContact</apiName><shortdesc>
		 Adds a contact to the roster.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>org.igniterealtime.xiff.core:UnescapedJID</apiOperationClassifier><apiDesc>The JID of the contact to add
		 </apiDesc></apiParam><apiParam><apiItemName>nickname</apiItemName><apiType value="String"/><apiDesc>A friendly name for use when displaying this contact in the roster
		 </apiDesc></apiParam><apiParam><apiItemName>groupName</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>(Optional) The name of the group that this contact should be added to. (Used for
		 organization in the roster listing.
		 </apiDesc></apiParam><apiParam><apiItemName>requestSubscription</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>(Optional) Determines whether a subscription request should be sent
		 to this user. Most of the time you will want this parameter to be true.
		 You will be unable to view the contacts presence status until a subscription request is granted.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds a contact to the roster. Remember: All roster data is managed on the server-side,
		 so this contact is added to the server-side roster first, and upon successful addition,
		 reflected in the local client-side copy of the roster.
		 		 </apiDesc><example>This example adds a contact to the roster and simultaneously requests a presence subscription
		 with the new contact.
		 <pre>myRoster.addContact( "homer@springfield.com", "Homer", "Drinking Buddies", true );</pre>
		 </example></apiOperationDetail></apiOperation><apiOperation id="org.igniterealtime.xiff.im:Roster:denySubscription"><apiName>denySubscription</apiName><shortdesc>
		 Revokes an existing presence subscription or denies a subscription request.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>to</apiItemName><apiOperationClassifier>org.igniterealtime.xiff.core:UnescapedJID</apiOperationClassifier><apiDesc>The JID of the user or service that you are denying subscription
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Revokes an existing presence subscription or denies a subscription request. If a user
		 has sent you a subscription request you can use this method to deny that request. Otherwise,
		 if a user already has a granted presence subscription, you can use this method to revoke that
		 subscription.
		 		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.igniterealtime.xiff.im:Roster:fetchRoster_result"><apiName>fetchRoster_result</apiName><shortdesc>
		 		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>resultIQ</apiItemName><apiOperationClassifier>org.igniterealtime.xiff.data:IQ</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.igniterealtime.xiff.im:Roster:fetchRoster"><apiName>fetchRoster</apiName><shortdesc>
		 Fetches the roster data from the server.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Fetches the roster data from the server. Once the data has been fetched, the Roster's data
		 provider is populated appropriately. If the Roster-XMPPConnection class dependency has been
		 set up before logging in, then this method will be called automatically because the Roster
		 listens for "login" events from the XMPPConnection.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.igniterealtime.xiff.im:Roster:getContainingGroups"><apiName>getContainingGroups</apiName><shortdesc>
		 		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc></apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiOperationClassifier>org.igniterealtime.xiff.data.im:IRosterItemVO</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.igniterealtime.xiff.im:Roster:getGroup"><apiName>getGroup</apiName><shortdesc>
		 Get a group by given name
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc></apiDesc><apiOperationClassifier>org.igniterealtime.xiff.data.im:IRosterGroup</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Get a group by given name
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.igniterealtime.xiff.im:Roster:getPresence"><apiName>getPresence</apiName><shortdesc>
		 Get the Presence of the given user if any.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc></apiDesc><apiOperationClassifier>org.igniterealtime.xiff.data:IPresence</apiOperationClassifier></apiReturn><apiParam><apiItemName>jid</apiItemName><apiOperationClassifier>org.igniterealtime.xiff.core:UnescapedJID</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Get the Presence of the given user if any.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.igniterealtime.xiff.im:Roster:grantSubscription"><apiName>grantSubscription</apiName><shortdesc>
		 Grants a user or service authorization for subscribing to your presence.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>tojid</apiItemName><apiOperationClassifier>org.igniterealtime.xiff.core:UnescapedJID</apiOperationClassifier><apiDesc>The JID of the user or service to grant subscription to
		 </apiDesc></apiParam><apiParam><apiItemName>requestAfterGrant</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Whether or not a reciprocal subscription request should be sent
		 to the grantee, so that you may, in turn, subscribe to his/her/its presence.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Grants a user or service authorization for subscribing to your presence. Once authorization
		 is granted, the user can see whether you are offline, online, away, etc. Subscriptions can
		 be revoked at any time using the <codeph>denySubscription()</codeph> method.
		 		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.igniterealtime.xiff.im:Roster:removeContact"><apiName>removeContact</apiName><shortdesc>
		 Removes a contact from the roster and revokes all presence subscriptions for that contact.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>rosterItem</apiItemName><apiOperationClassifier>org.igniterealtime.xiff.data.im:IRosterItemVO</apiOperationClassifier><apiDesc>The value object which is to be removed
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a contact from the roster and revokes all presence subscriptions for that contact.
		 This method will only attempt action if the contact you are trying to remove is currently on the
		 roster in the first place.
		 		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.igniterealtime.xiff.im:Roster:requestSubscription"><apiName>requestSubscription</apiName><shortdesc>
		 Requests subscription authorization with a user or service.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>org.igniterealtime.xiff.core:UnescapedJID</apiOperationClassifier><apiDesc>The JID of the user or service that you wish to subscribe to
		 </apiDesc></apiParam><apiParam><apiItemName>isResponse</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Requests subscription authorization with a user or service. In the XMPP-world, you cannot receive
		 notifications on changes to a contact's presence until that contact has authorized you to subscribe
		 to his/her/its presence.
		 		 </apiDesc></apiOperationDetail><related-links><link href="org.igniterealtime.xiff.im.xml#Roster/subscriptionDenial"><linktext>subscriptionDenial</linktext></link></related-links></apiOperation><apiOperation id="org.igniterealtime.xiff.im:Roster:setPresence"><apiName>setPresence</apiName><shortdesc>
		 Sets your current presence status.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>show</apiItemName><apiType value="String"/><apiDesc>The show type for your presence. This represents what others should see - whether
		 you are offline, online, away, etc.
		 </apiDesc></apiParam><apiParam><apiItemName>status</apiItemName><apiType value="String"/><apiDesc>The status message associated with the show value
		 </apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiDesc>(Optional) A priority integer for the presence
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets your current presence status. Calling this method notifies others who
		 are subscribed to your presence of a presence change. You should use this to
		 change your status to away, extended-away, etc. There are static variables that
		 you can use defined in the presence class for the <codeph>show</codeph> parameter:
		 <ul>
		 <li><codeph>Presence.SHOW_AWAY</codeph></li>
		 <li><codeph>Presence.SHOW_CHAT</codeph></li>
		 <li><codeph>Presence.SHOW_DND</codeph></li>
		 <li><codeph>Presence.SHOW_NORMAL</codeph></li>
		 <li><codeph>Presence.SHOW_XA</codeph></li>
		 </ul>
		 		 </apiDesc></apiOperationDetail><related-links><link href="org.igniterealtime.xiff.data.xml#Presence"><linktext>org.igniterealtime.xiff.data.Presence</linktext></link></related-links></apiOperation><apiOperation id="org.igniterealtime.xiff.im:Roster:unsubscribe_result"><apiName>unsubscribe_result</apiName><shortdesc>
		 		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>resultIQ</apiItemName><apiOperationClassifier>org.igniterealtime.xiff.data:IQ</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.igniterealtime.xiff.im:Roster:updateContactGroups"><apiName>updateContactGroups</apiName><shortdesc>
		 Updates the groups associated with an existing contact.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>rosterItem</apiItemName><apiOperationClassifier>org.igniterealtime.xiff.data.im:IRosterItemVO</apiOperationClassifier><apiDesc>The value object of the contact to update
		 </apiDesc></apiParam><apiParam><apiItemName>newGroupNames</apiItemName><apiType value="Array"/><apiDesc>The new groups to associate the contact with
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Updates the groups associated with an existing contact.
		 		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.igniterealtime.xiff.im:Roster:updateContactName"><apiName>updateContactName</apiName><shortdesc>
		 Updates the display name for an existing contact.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>rosterItem</apiItemName><apiOperationClassifier>org.igniterealtime.xiff.data.im:IRosterItemVO</apiOperationClassifier><apiDesc>The value object of the contact to update
		 </apiDesc></apiParam><apiParam><apiItemName>newName</apiItemName><apiType value="String"/><apiDesc>The new display name for this contact
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Updates the display name for an existing contact.
		 		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="org.igniterealtime.xiff.im:Roster:connection:get"><apiName>connection</apiName><shortdesc>
		 The instance of the XMPPConnection class to use for the roster to use for
		 sending and receiving data.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>org.igniterealtime.xiff.core:IXMPPConnection</apiValueClassifier></apiValueDef><apiDesc>
		 The instance of the XMPPConnection class to use for the roster to use for
		 sending and receiving data.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.igniterealtime.xiff.im:IRoster"><apiName>IRoster</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.igniterealtime.xiff.collections:ICollection</apiBaseInterface><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="org.igniterealtime.xiff.im:IRoster:org.igniterealtime.xiff.im:IRoster:addContact"><apiName>addContact</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>org.igniterealtime.xiff.core:UnescapedJID</apiOperationClassifier></apiParam><apiParam><apiItemName>nickname</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>groupName</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam><apiParam><apiItemName>requestSubscription</apiItemName><apiType value="Boolean"/><apiData>true</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="org.igniterealtime.xiff.im:IRoster:org.igniterealtime.xiff.im:IRoster:denySubscription"><apiName>denySubscription</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>tojid</apiItemName><apiOperationClassifier>org.igniterealtime.xiff.core:UnescapedJID</apiOperationClassifier></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="org.igniterealtime.xiff.im:IRoster:org.igniterealtime.xiff.im:IRoster:fetchRoster"><apiName>fetchRoster</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="org.igniterealtime.xiff.im:IRoster:org.igniterealtime.xiff.im:IRoster:getContainingGroups"><apiName>getContainingGroups</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiOperationClassifier>org.igniterealtime.xiff.data.im:IRosterItemVO</apiOperationClassifier></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="org.igniterealtime.xiff.im:IRoster:org.igniterealtime.xiff.im:IRoster:getGroup"><apiName>getGroup</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>org.igniterealtime.xiff.data.im:IRosterGroup</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="org.igniterealtime.xiff.im:IRoster:org.igniterealtime.xiff.im:IRoster:getPresence"><apiName>getPresence</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>org.igniterealtime.xiff.data:IPresence</apiOperationClassifier></apiReturn><apiParam><apiItemName>jid</apiItemName><apiOperationClassifier>org.igniterealtime.xiff.core:UnescapedJID</apiOperationClassifier></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="org.igniterealtime.xiff.im:IRoster:org.igniterealtime.xiff.im:IRoster:grantSubscription"><apiName>grantSubscription</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>tojid</apiItemName><apiOperationClassifier>org.igniterealtime.xiff.core:UnescapedJID</apiOperationClassifier></apiParam><apiParam><apiItemName>requestAfterGrant</apiItemName><apiType value="Boolean"/><apiData>true</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="org.igniterealtime.xiff.im:IRoster:org.igniterealtime.xiff.im:IRoster:removeContact"><apiName>removeContact</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>rosterItem</apiItemName><apiOperationClassifier>org.igniterealtime.xiff.data.im:IRosterItemVO</apiOperationClassifier></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="org.igniterealtime.xiff.im:IRoster:org.igniterealtime.xiff.im:IRoster:requestSubscription"><apiName>requestSubscription</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>org.igniterealtime.xiff.core:UnescapedJID</apiOperationClassifier></apiParam><apiParam><apiItemName>isResponse</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="org.igniterealtime.xiff.im:IRoster:org.igniterealtime.xiff.im:IRoster:setPresence"><apiName>setPresence</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>show</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>status</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="org.igniterealtime.xiff.im:IRoster:org.igniterealtime.xiff.im:IRoster:updateContactGroups"><apiName>updateContactGroups</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>rosterItem</apiItemName><apiOperationClassifier>org.igniterealtime.xiff.data.im:IRosterItemVO</apiOperationClassifier></apiParam><apiParam><apiItemName>newGroupNames</apiItemName><apiType value="Array"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="org.igniterealtime.xiff.im:IRoster:org.igniterealtime.xiff.im:IRoster:updateContactName"><apiName>updateContactName</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>rosterItem</apiItemName><apiOperationClassifier>org.igniterealtime.xiff.data.im:IRosterItemVO</apiOperationClassifier></apiParam><apiParam><apiItemName>newName</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="org.igniterealtime.xiff.im:IRoster:org.igniterealtime.xiff.im:IRoster:connection:get"><apiName>connection</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>org.igniterealtime.xiff.core:IXMPPConnection</apiValueClassifier></apiValueDef></apiValueDetail></apiValue></apiClassifier></apiPackage>